{"ast":null,"code":"//  Главный API ЛК - авторизация, работа с профилем и коллекцией фильмов  //\n//  Проверка ответа сервера, создание токена, редактирование профиля, коллекции фильмов  //\n\nimport { BASEURL } from './const.js';\nclass MainApi {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n  }\n  async _checkResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(await res.json());\n    }\n    return res.json();\n  }\n  setToken(token) {\n    this._headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    };\n  }\n  editProfileApi(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        email: data.email\n      })\n    }).then(this._checkResponse);\n  }\n  getSavedMovies() {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  addMovie(data) {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        year: data.year,\n        description: data.description,\n        image: data.image,\n        trailerLink: data.trailerLink,\n        thumbnail: data.thumbnail,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN\n      })\n    }).then(this._checkResponse);\n  }\n  removeMovie(movieId) {\n    return fetch(`${this._baseUrl}/movies/${movieId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n}\nconst API_CONFIG = {\n  baseUrl: BASEURL,\n  credentials: 'include'\n};\nconst mainApi = new MainApi(API_CONFIG);\nexport default mainApi;","map":{"version":3,"names":["BASEURL","MainApi","constructor","options","_baseUrl","baseUrl","_checkResponse","res","ok","Promise","reject","json","setToken","token","_headers","Accept","Authorization","editProfileApi","data","fetch","method","credentials","headers","body","JSON","stringify","name","email","then","getSavedMovies","addMovie","country","director","duration","year","description","image","trailerLink","thumbnail","movieId","id","nameRU","nameEN","removeMovie","API_CONFIG","mainApi"],"sources":["/Users/kirillchistov/Projects/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["//  Главный API ЛК - авторизация, работа с профилем и коллекцией фильмов  //\n//  Проверка ответа сервера, создание токена, редактирование профиля, коллекции фильмов  //\n\nimport { BASEURL } from './const.js';\n\nclass MainApi {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n  }\n\n  async _checkResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(await res.json());\n    }\n    return res.json();\n  }\n\n  setToken(token) {\n    this._headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    };\n  }\n\n  editProfileApi(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        email: data.email,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  getSavedMovies() {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers,\n    }).then(this._checkResponse);\n  }\n\n  addMovie(data) {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        year: data.year,\n        description: data.description,\n        image: data.image,\n        trailerLink: data.trailerLink,\n        thumbnail: data.thumbnail,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  removeMovie(movieId) {\n    return fetch(`${this._baseUrl}/movies/${movieId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then(this._checkResponse);\n  }\n}\n\nconst API_CONFIG = {\n  baseUrl: BASEURL,\n  credentials: 'include',\n};\n\nconst mainApi = new MainApi(API_CONFIG);\n\nexport default mainApi;\n"],"mappings":"AAAA;AACA;;AAEA,SAASA,OAAO,QAAQ,YAAY;AAEpC,MAAMC,OAAO,CAAC;EACZC,WAAW,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,QAAQ,GAAGD,OAAO,CAACE,OAAO;EACjC;EAEA,MAAMC,cAAc,CAACC,GAAG,EAAE;IACxB,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;MACX,OAAOC,OAAO,CAACC,MAAM,CAAC,MAAMH,GAAG,CAACI,IAAI,EAAE,CAAC;IACzC;IACA,OAAOJ,GAAG,CAACI,IAAI,EAAE;EACnB;EAEAC,QAAQ,CAACC,KAAK,EAAE;IACd,IAAI,CAACC,QAAQ,GAAG;MACdC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASH,KAAM;IACjC,CAAC;EACH;EAEAI,cAAc,CAACC,IAAI,EAAE;IACnB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,QAAS,WAAU,EAAE;MACxCgB,MAAM,EAAE,OAAO;MACfC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE,IAAI,CAACR,QAAQ;MACtBS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAER,IAAI,CAACQ,IAAI;QACfC,KAAK,EAAET,IAAI,CAACS;MACd,CAAC;IACH,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAACtB,cAAc,CAAC;EAC9B;EAEAuB,cAAc,GAAG;IACf,OAAOV,KAAK,CAAE,GAAE,IAAI,CAACf,QAAS,SAAQ,EAAE;MACtCgB,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE,IAAI,CAACR;IAChB,CAAC,CAAC,CAACc,IAAI,CAAC,IAAI,CAACtB,cAAc,CAAC;EAC9B;EAEAwB,QAAQ,CAACZ,IAAI,EAAE;IACb,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACf,QAAS,SAAQ,EAAE;MACtCgB,MAAM,EAAE,MAAM;MACdE,OAAO,EAAE,IAAI,CAACR,QAAQ;MACtBS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBM,OAAO,EAAEb,IAAI,CAACa,OAAO;QACrBC,QAAQ,EAAEd,IAAI,CAACc,QAAQ;QACvBC,QAAQ,EAAEf,IAAI,CAACe,QAAQ;QACvBC,IAAI,EAAEhB,IAAI,CAACgB,IAAI;QACfC,WAAW,EAAEjB,IAAI,CAACiB,WAAW;QAC7BC,KAAK,EAAElB,IAAI,CAACkB,KAAK;QACjBC,WAAW,EAAEnB,IAAI,CAACmB,WAAW;QAC7BC,SAAS,EAAEpB,IAAI,CAACoB,SAAS;QACzBC,OAAO,EAAErB,IAAI,CAACsB,EAAE;QAChBC,MAAM,EAAEvB,IAAI,CAACuB,MAAM;QACnBC,MAAM,EAAExB,IAAI,CAACwB;MACf,CAAC;IACH,CAAC,CAAC,CAACd,IAAI,CAAC,IAAI,CAACtB,cAAc,CAAC;EAC9B;EAEAqC,WAAW,CAACJ,OAAO,EAAE;IACnB,OAAOpB,KAAK,CAAE,GAAE,IAAI,CAACf,QAAS,WAAUmC,OAAQ,EAAC,EAAE;MACjDnB,MAAM,EAAE,QAAQ;MAChBE,OAAO,EAAE,IAAI,CAACR;IAChB,CAAC,CAAC,CAACc,IAAI,CAAC,IAAI,CAACtB,cAAc,CAAC;EAC9B;AACF;AAEA,MAAMsC,UAAU,GAAG;EACjBvC,OAAO,EAAEL,OAAO;EAChBqB,WAAW,EAAE;AACf,CAAC;AAED,MAAMwB,OAAO,GAAG,IAAI5C,OAAO,CAAC2C,UAAU,CAAC;AAEvC,eAAeC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}